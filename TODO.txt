TODO list:
	Passes:
		ComputeMatrices:
			Input:
				- GpuBuffer in
				- {GpuBufferView inputView, mat4 transform, uintptr_t offset}[] toTransform
				- GpuBuffer out
			Output:
				- GpuBufferView[]& output
			Process:
				- Assert that output size is equal to input toTransform size.
				- Ensure that no overflow can happen when writing to an output buffer.
				- Read from the input buffer at each input view. Transform it with the given mat4 and store it in the output. Put views at matching index with the offset into the output buffer specified.

		Shadowmap:
			Input:
				- {Mesh, GpuBufferView transforms}[]
				- Light[]
			Output:
				- Tex2D || Tex2D[] || Tex2DCube || Tex2DCube[]
			Process:
				- Bind the output to a render target. Transform the matrices on the GPU. Draw depth into output texture.
				- Draw to 2d/cube | single/array.
				
		Forward:
			Input:
				- {Mesh, Transform[], InstanceData[]}[]
				- {Light, shadowmap}[]
				- Camera
				- AmbientLight;
			Output:
				- RenderTarget
			Process:
				- Upload every light. Bind mesh. Transform on GPU into empty buffer. Bind buffer and instance data etc. Draw and perform light calculations. Order of input is kept.
				
		Clear:
			Input:
				- {RenderTarget, clearflag}[]
			
			Output:
				- Nothing. 
			Process:
				- Clears all buffers attached to the render target. Flags (depth, attachment1, attachment2 etc.) determine which are cleared.

		Blit:
			Input:
				- {RenderTarget, RenderTarget, BlendMode, SrcRect, DstRect, Attachment[], DepthStencil}[]
			Output:
				- Nothing
			Process:
				- Copy contents of A into B. Blend pixels with the given BlendMode.
				- If multiple attachments exist, Attachment[] specifies which ones will be copied over. DepthStencil determines if the depth stencil will also be copied.
				
		DOF:
			Input:
				- {RenderTarget, RenderTarget, strength, focalPoint}
			Output:
				- Nothing
			Process:
				- Copy src into destination and apply a blur effect that changes based on the depth distance from the focal point depth.
				- If src and dest are the same, use a temporary buffer or something to store the data in while it's being processed.
				
	Conclusion:
		- Transforms can be uploaded once to a single GpuBuffer. Shadowmap and Forward will use the same GpuBufferViews. They transform them against different pv matrices.
		- InstanceData is uploaded separate from the transforms. It has a separate GpuBuffer possibly. Could also share one if proper management of memory is done.
		- If the set of rendered geometry changes, the GpuBuffers have to be re-uploaded.
		
		- GpuBufferView should offer a stride to then know where a specific element on the GPU resides to allow partial overrides.
		
	MemoryAccess:
		- CPU_R (The CPU can read and the GPU can write).
		- CPU_W (The CPU can write and the GPU can read).
		- GPU	(The CPU cannot access this memory at all).
		
	Rendering of a single frame breakdown:
		Setup:
			- Create GpuBuffer for uploading (MemoryAccess::CPU_W) to store transforms in.
			- Create a GpuBuffer that only the GPU can access (MemoryAccess::GPU) to store output from the compute shader in.
			- Create a pipeline that has a ComputeTransformPass, ShadowMap pass and Forward pass.
			- Upload all transforms of the entire scene into the upload buffer contiguously.
			- Let the ComputeTransformPass calculate the MVP for each, and store it in the GPU only buffer.
			- Do this for every light (the input for compute accepts an array which will perform multiple calculations.
			- Calculate the views for each lights matrices for the geometry that should cast a shadow.
			- Pass each light in combination with the transform views of the matrices and the meshes + instances to the ShadowMapPass.
			- Generate a shadow map for each light.
			- Pass the shadow maps, lights, transformed matrices and other instance data to the forward pass.
			- Draw all geometry instanced with the right views bound. 
			- Pray that this all works.
			
	Drawing multiple lights:
		- Put if/else in shader that checks: if(shadowMapPresent && shadowMap.getShadow(x,y)) to determine if in shadow. The branch is always required anyways.
		- Let the user upload light data to a GpuBuffer and set the view for them (separate for spot/point/directional). Set ambient as a uniform variable.
		- Repurpose MeshShaderCache to a generic shader cache that can take uint16/32/64_t as key. Add defines to ForwardPass for each possible shader setting (light/shadowmap/shadowmaparray, material).
		- When execute is called on ForwardPass, create the key for the current settings to get the right shader from the registry. Combine AttributeSettings with the shader specific defines to make the key.
		- Render the scene by iterating over the lights of each type, and checking if a shadowmap is present. Then if not in shadow do shading and add ambient shading to it.
		- Add MaterialID to mesh settings.
		
	Materials:
		
		MaterialAttribute:
			- DIFFUSE(RGB), NORMAL(XYZ), EMISSIVE(RGB), {Occlusion(R), Metallic(G), Roughness(B), Height(A)}
			- Each attribute has a single bit, and they can be combined into a bitmask.
			- Occlusion/Metallic/Roughness/Height are stored in a single texture.

		Material:
			- Contains MaterialAttribute mask to show which textures are enabled.
			- Can be bound to shader with matching MATERIAL_SINGLE preprocessor definition.
			- Each material texture can be set using a function. That function then automatically enables the right bitmask flag.
			- Setting textures etc can be done in the MaterialSettings object. This can then be set for the Material in the contructor or at runtime to allow for modifying materials.
			
		MaterialBatch:
			- Multiple materials in a single object. Amount is determined on creation. All are the same dimensions.
			- Contains material data array that can be uploaded to a GpuBuffer.
			- Contains a tex2darray containing every material texture. Tightly packed, order always the same dependent on which textures are enabled.
			- In the shader, dynamic incrementing of index will have to be used to obtain the index of the right texture.
			- Has a mask that is the same for every material in the array.
			- Can be bound to the shader with matching MATERIAL_BATCH preprocessor definition.
			- Mesh will contain materialID per vertex, which is used to fetch the right texture in the shader.
			- Validate that materialID attribute is enabled when this is used to draw a mesh.
			
			- MaterialBatch data can be provided to the resource through a MaterialBatchSettings object.
			- It cannot be altered at runtime, unlike regular single materials.
			
		- Possibly use inheritance to have MaterialBatch and MaterialSingle inherit from Material. Enumeration type can be used to determine how to bind and which shader to use.
		
		RenderState:
			- Culling, cullface, winding order, blend mode and depth testing can all be enabled or disabled.
			- Each mesh might have different settings.
			- Create an object that contains these settings (that can be mapped to OpenGL or D3D).
			- In the renderer, specify the state for each draw call.
			
	ShaderRegistry:
		- Key (16/32/64 bit)
		- Register Bit/String combination.
		- Get(Key) -> Checks each bit of key, then finds the matching string and adds it to the shader as preprocessor to then compile. Or retrieves already loaded shader.
		- Maybe have a global instance of this for each renderer type to prevent double loading of the same shader.
		- These can be stored inside the api abstract part of the framework. Implementation is not different per API.
			
			
	Lockable:
		- RecursiveLock function that locks internal resources. This is useful for material and render target.
		



	API IMPLEMENTATION:
		- Create GPUBuffer object that allows writing data to the GPU.
			- Inherits from RenderResource.
			- RenderPasses can take them in as GPU backed buffer.
			- Offers function to write data: void* offset Write<T>(offset, amount, T* data).
			- Offers function to set read offset: void SetReadOffset(void*);
			
			- Padding is automatically added. That's why T is required and why the offset is returned. IT doesn't always match the actual size.
			- When queueing instance data for draw, the offset pointer that was returned is provided.
			- The render pass can then set the offset to read from the buffer, and the shader will get the right data for each draw call.
			- A single buffer can be used for multiple shaders this way.
			- Construct the buffer with: max size (0 for unbound), read/write mode (DYNAMIC or STATIC draw)
			
			- OpenGL implementation:
				- SSBO
				- std430 (16 byte alignment I think but not sure)
				- glBindBufferRange(TARGET, shaderBlockBindingID, ssboID, offset(byte), size(byte)) <- Tells the shader to read from the ssbo from the specified offset.
					- This is called for each draw call and the offset is set to the instance data provided offset.
			
		- Window resize callback.
			
		- Lockable interface.
			- Lock, Unlock functions.
			- Thread safety through mutexes.
			- Can be implemented by specific Resources (texture, rendertarget).
			- Ensures that a resources state can only be changed by one pipeline at a time.
			- Make an equivalent LockGuard class that holds a lockable object. Use RAII to lock and unlock.
			- Inside RenderPipeline, keep a list of all active locks. On Execute(), gather all lockable resources from each render pass in the pipeline. Then create locks for them.
			- Once the pipeline finishes executing, unlock all resources. The GPU may still be busy executing the command list. use IsDoneExecuting to manually unlock.
				- Specify on pipeline creation if the pipeline should unlock and if the CPU should be stalled before returning from Execute(). If stalled, auto unlock.
			- When execute is called, destroy all existing locks.
			- When a lock is created for a resource that already had a lock, throw an exception and stop execution.
			- Resources that allow manual user input (Write function of GPUBuffer) will have to be implemented to ensure that they are NOT locked when this is called.

		- Implement the material class (different textures, attributes). Logic for animations and such are performed outside of the material itself.
		
	API THREAD SAFETY:
		- Locking mechanism for read/write mode switching and ensuring only a single pipeline changes state at a time.
			- Add Lock() function to render target and texture (rendertarget calls it on attachments).
			- Inside renderpasses, call lock on resources that are bound. This takes the pipeline ID in.
			- When another pipeline tries to lock a resource, it will know it's already locked and can throw an error.
			- Locking READ_ONLY resources would not be necessary. 

	RENDERING PIPELINE
		DEBUG TOOLS:
			- 2D renderpass for efficient 2D drawing.
			- Line renderpass for line drawing.
			- Geometry renderpass for drawing shapes (spheres, cubes, cones etc.).
			
		GRAPHICS PIPELINE:
			- Clearing render targets.
			- Draw forward geometry with lights, materials and shadowmaps (just geometry first).
			- Create shadowmap for lights with a chosen set of geometry (cubemap for point lights, 2D texture for directional lights).
			- Drawing cubemap for the given set of geometry.
			- Rendering the skybox from a cubemap.
			
		LOW PRIORITY GRAPHICS:
			- Deferred rendering pipeline.
			- Animation support (skeletal mesh class and animation pipeline).
			- Post processing (ssao, dof, motion blur).
			- GPU based particle system.
			- Fast renderer for lots of geometry (bundling materials and minimizing draw calls).
	
